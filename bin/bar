#!/usr/bin/env zsh
#
# Based on @dylanaraps' and michalrus' scripts.
#
# Depends on: xorg-xrandr, wmctrl, mpc, lemonbar, ip, xdotool

# Make sure are subprocesses are killed.
trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

font="Roboto Mono-11"
icon="Material Icons-14"
height="${BAR_HEIGHT:-45}"

ipc_fifo="$(mktemp)"
rm "$ipc_fifo"
mkfifo "$ipc_fifo"

forever() {
  while true ; do "$@" ; done |\
      awk -v "key=$1" '{ print key"="$0; fflush(); }' > "$ipc_fifo" &
}

get_workspaces() {
    # Create a dynamic workspace switcher.
    workspaces="$(wmctrl -d | awk -v fg="${color8:-#F0F0F0}" \
                                  '$6!="0,0"{next}
                                   $2=="-"{printf "  %{F"fg"}" $NF "  %{F-}"}
                                   $2=="*"{printf "  " $NF "  "}')"
    printf "%s\\n" "$workspaces"
}

get_date() {
    # Get the date and time.
    printf "%s\\n" "$(date +"%a %d %b   -  %l:%M %p")"
}

battery() {
    eval "$(cat /sys/class/power_supply/BAT*/uevent | sed 's/^/local /;s/=/="/;s/$/"/')"
    icon='\ue1a3'
    warning=
    current=$POWER_SUPPLY_CURRENT_NOW

    if [ $POWER_SUPPLY_STATUS = "Discharging" ] ; then
        [ $POWER_SUPPLY_CAPACITY -le 10 ] && warning=1
        icon='\ue1a4'
    fi

    text="$POWER_SUPPLY_CAPACITY%"

    if [ $warning ] ; then
        echo "%{B$c_red} $icon $text %{B-}"
    else
        echo "$(icon "$icon") $text"
    fi
}

get_volume() {
    # Get the system volume.
    volume="$(amixer sget Master | grep -o -m 1 -E "[[:digit:]]+%")"
    case "$volume" in
        0%)   vol_icon='\ue04f' ;;
        1?%|2?%|3?%) vol_icon='\ue04e' ;;
        4?%|5?%|6?%) vol_icon='\ue04d' ;;
        *) vol_icon='\ue050' ;;
    esac

    echo "$(icon "$vol_icon") ${volume}"

}

get_disk_space() {
    value="$(df --output='avail' -h / | grep -v "Avail")"
    echo "$(icon '\ue6c4') $value"
}

get_proc_usage() {
     mpstat | awk '{print $4}' | sed -n 4p
}

get_mem_avail() {
    printf '%s' "$(free -h | awk '/Mem:/ { print $7 }')"
}

# Returns:
#   - none;
#   - limited;
#   - portal â€” behind a captive portal and cannot reach the full Internet;
#   - wifi_<str> where <str> is value between 0-100 representing connection
#       strength;
#   - wired;
#   - unknown.
connection_type() {
    connection_status="$(nmcli networking connectivity)"
    # Detect the connection type is connectivity status is fine.
    if [ "$connection_status" = 'full' ]; then

        wifi_strength="$(nmcli -f ACTIVE,SIGNAL device wifi |\
            awk '/yes/ { print $2 }')"
        [ ! -z "$wifi_strength" ] &&\
            printf 'wifi_%s' "$wifi_strength" ||\
            printf 'wired'

    # Otherwise just print the status.
    else
        printf '%s' "$connection_status"
    fi
}

get_connectivity_info() {
    connection="$(connection_type)"
    case "$connection" in
        none)                                            connectivity_icon='\ue1d0' ;;

        portal|limited)                                  connectivity_icon='\ue1cd' ;;

        wifi_[0-9]|wifi_1?|wifi_2|wifi_3?|wifi_4?)       connectivity_icon='\ue1cf' ;;

        wifi_*)                                          connectivity_icon='\ue1c8' ;;

        wired)                                           connectivity_icon='\ue30c' ;;

        *)                                               connectivity_icon='\ue8fd' ;;
    esac

    echo "$(icon "$connectivity_icon")"
}

icon() {
    # Format an icon.
    echo "%{F${color3:-#F0F0F0}}${1}%{F-}"
}

main() {
    # Import colors from 'wal'.
    . "${HOME}/.cache/wal/colors.sh"
    # local separator="    $(icon '|')    " TODO
    local separator="   "
    # Loop and print the info.
    while :; do
        workspaces="$(get_workspaces)"
        date="$(get_date)"
        volume="$(get_volume)"
        disk_space="$(get_disk_space)"
        proc_usage="$(get_proc_usage)"
        mem_avail="$(get_mem_avail)"
        connectivity="$(get_connectivity_info)"
        bat="$(battery)"

        printf "%s%s%s\\n" \
               "%{l}${workspaces}$separator ${proc_usage} ${mem_avail}"\
               "%{c}${date}"\
               "%{r}${volume} $separator ${disk_space} $separator ${bat} $separator ${connectivity}  "
        sleep .1s
    done |\

    # Launch lemonbar.
    lemonbar -d -g "x${height}" \
             -B "${color0:-#000000}" -F "${color15:-#F0F0F0}"\
             -n "bar" -f "$font" -f "$icon"
}

main "$@"
